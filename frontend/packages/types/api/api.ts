/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from './common'
import type { RequestArgs } from './base'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap
} from './base'

/**
 *
 * @export
 * @interface BiasRead
 */
export interface BiasRead {
  /**
   * A numerical score representing the detected bias.
   * @type {string}
   * @memberof BiasRead
   */
  score: string
  /**
   * The type of bias detected, e.g., gender, age, racial.
   * @type {string}
   * @memberof BiasRead
   */
  type: string
  /**
   * A brief description of the bias.
   * @type {string}
   * @memberof BiasRead
   */
  description: string
  /**
   *
   * @type {number}
   * @memberof BiasRead
   */
  id: number
}
/**
 *
 * @export
 * @interface ChatListRead
 */
export interface ChatListRead {
  /**
   *
   * @type {number}
   * @memberof ChatListRead
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof ChatListRead
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof ChatListRead
   */
  updated_at: string
}
/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
  /**
   *
   * @type {Array<ValidationError>}
   * @memberof HTTPValidationError
   */
  detail?: Array<ValidationError>
}
/**
 *
 * @export
 * @interface MessageCreate
 */
export interface MessageCreate {
  /**
   * The text content of the message.
   * @type {string}
   * @memberof MessageCreate
   */
  content: string
  /**
   * The role of the message sender, e.g., \'user\' or \'assistant\'.
   * @type {string}
   * @memberof MessageCreate
   */
  role: string
}
/**
 *
 * @export
 * @interface MessageRead
 */
export interface MessageRead {
  /**
   * The text content of the message.
   * @type {string}
   * @memberof MessageRead
   */
  content: string
  /**
   * The role of the message sender, e.g., \'user\' or \'assistant\'.
   * @type {string}
   * @memberof MessageRead
   */
  role: string
  /**
   *
   * @type {number}
   * @memberof MessageRead
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof MessageRead
   */
  created_at: string
  /**
   *
   * @type {string}
   * @memberof MessageRead
   */
  updated_at: string
  /**
   *
   * @type {number}
   * @memberof MessageRead
   */
  chat_id: number
  /**
   *
   * @type {BiasRead}
   * @memberof MessageRead
   */
  bias?: BiasRead | null
}
/**
 *
 * @export
 * @interface SignUpModal
 */
export interface SignUpModal {
  /**
   *
   * @type {number}
   * @memberof SignUpModal
   */
  id: number | null
  /**
   *
   * @type {string}
   * @memberof SignUpModal
   */
  username: string
  /**
   *
   * @type {string}
   * @memberof SignUpModal
   */
  email: string
  /**
   *
   * @type {string}
   * @memberof SignUpModal
   */
  password: string
}
/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
  /**
   *
   * @type {Array<ValidationErrorLocInner>}
   * @memberof ValidationError
   */
  loc: Array<ValidationErrorLocInner>
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  msg: string
  /**
   *
   * @type {string}
   * @memberof ValidationError
   */
  type: string
}
/**
 *
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Authenticate User
     * @param {string} username
     * @param {string} password
     * @param {string | null} [grantType]
     * @param {string} [scope]
     * @param {string | null} [clientId]
     * @param {string | null} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticateUserAuthTokenPost: async (
      username: string,
      password: string,
      grantType?: string | null,
      scope?: string,
      clientId?: string | null,
      clientSecret?: string | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'username' is not null or undefined
      assertParamExists('authenticateUserAuthTokenPost', 'username', username)
      // verify required parameter 'password' is not null or undefined
      assertParamExists('authenticateUserAuthTokenPost', 'password', password)
      const localVarPath = `/auth/token`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      const localVarFormParams = new URLSearchParams()

      if (grantType !== undefined) {
        localVarFormParams.set('grant_type', grantType as any)
      }

      if (username !== undefined) {
        localVarFormParams.set('username', username as any)
      }

      if (password !== undefined) {
        localVarFormParams.set('password', password as any)
      }

      if (scope !== undefined) {
        localVarFormParams.set('scope', scope as any)
      }

      if (clientId !== undefined) {
        localVarFormParams.set('client_id', clientId as any)
      }

      if (clientSecret !== undefined) {
        localVarFormParams.set('client_secret', clientSecret as any)
      }

      localVarHeaderParameter['Content-Type'] =
        'application/x-www-form-urlencoded'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = localVarFormParams.toString()

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @summary Refresh Access Token
     * @param {string} refershToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshAccessTokenAuthRefreshPost: async (
      refershToken: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'refershToken' is not null or undefined
      assertParamExists(
        'refreshAccessTokenAuthRefreshPost',
        'refershToken',
        refershToken
      )
      const localVarPath = `/auth/refresh`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (refershToken != null) {
        localVarHeaderParameter['refersh-token'] = String(refershToken)
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Authenticate User
     * @param {string} username
     * @param {string} password
     * @param {string | null} [grantType]
     * @param {string} [scope]
     * @param {string | null} [clientId]
     * @param {string | null} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authenticateUserAuthTokenPost(
      username: string,
      password: string,
      grantType?: string | null,
      scope?: string,
      clientId?: string | null,
      clientSecret?: string | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authenticateUserAuthTokenPost(
          username,
          password,
          grantType,
          scope,
          clientId,
          clientSecret,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthApi.authenticateUserAuthTokenPost']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Refresh Access Token
     * @param {string} refershToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async refreshAccessTokenAuthRefreshPost(
      refershToken: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.refreshAccessTokenAuthRefreshPost(
          refershToken,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthApi.refreshAccessTokenAuthRefreshPost']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    }
  }
}

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AuthApiFp(configuration)
  return {
    /**
     *
     * @summary Authenticate User
     * @param {string} username
     * @param {string} password
     * @param {string | null} [grantType]
     * @param {string} [scope]
     * @param {string | null} [clientId]
     * @param {string | null} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticateUserAuthTokenPost(
      username: string,
      password: string,
      grantType?: string | null,
      scope?: string,
      clientId?: string | null,
      clientSecret?: string | null,
      options?: any
    ): AxiosPromise<any> {
      return localVarFp
        .authenticateUserAuthTokenPost(
          username,
          password,
          grantType,
          scope,
          clientId,
          clientSecret,
          options
        )
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Refresh Access Token
     * @param {string} refershToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshAccessTokenAuthRefreshPost(
      refershToken: string,
      options?: any
    ): AxiosPromise<any> {
      return localVarFp
        .refreshAccessTokenAuthRefreshPost(refershToken, options)
        .then((request) => request(axios, basePath))
    }
  }
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
  /**
   *
   * @summary Authenticate User
   * @param {string} username
   * @param {string} password
   * @param {string | null} [grantType]
   * @param {string} [scope]
   * @param {string | null} [clientId]
   * @param {string | null} [clientSecret]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authenticateUserAuthTokenPost(
    username: string,
    password: string,
    grantType?: string | null,
    scope?: string,
    clientId?: string | null,
    clientSecret?: string | null,
    options?: RawAxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .authenticateUserAuthTokenPost(
        username,
        password,
        grantType,
        scope,
        clientId,
        clientSecret,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Refresh Access Token
   * @param {string} refershToken
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public refreshAccessTokenAuthRefreshPost(
    refershToken: string,
    options?: RawAxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .refreshAccessTokenAuthRefreshPost(refershToken, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * ChatsApi - axios parameter creator
 * @export
 */
export const ChatsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Deletes a chat by ID, handling not found errors.
     * @summary Delete Chat
     * @param {number} chatId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteChatChatsChatIdDelete: async (
      chatId: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'chatId' is not null or undefined
      assertParamExists('deleteChatChatsChatIdDelete', 'chatId', chatId)
      const localVarPath = `/chats/{chat_id}`.replace(
        `{${'chat_id'}}`,
        encodeURIComponent(String(chatId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Retrieves all chats sorted by last updated time.
     * @summary List Chats
     * @param {any} [db]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listChatsChatsGet: async (
      db?: any,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/chats/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      if (db !== undefined) {
        for (const [key, value] of Object.entries(db)) {
          localVarQueryParameter[key] = value
        }
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Fetches all messages for a specific chat.
     * @summary List Messages
     * @param {number} chatId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMessagesChatsChatIdMessagesGet: async (
      chatId: number | undefined,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'chatId' is not null or undefined
      assertParamExists('listMessagesChatsChatIdMessagesGet', 'chatId', chatId)
      const localVarPath = `/chats/{chat_id}/messages`.replace(
        `{${'chat_id'}}`,
        encodeURIComponent(String(chatId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     * Creates a message in an existing chat or starts a new chat if chat_id is not provided.
     * @summary Post Message
     * @param {MessageCreate} messageCreate
     * @param {number | null} [chatId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMessageChatsMessagesPost: async (
      messageCreate: MessageCreate,
      chatId?: number | null,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'messageCreate' is not null or undefined
      assertParamExists(
        'postMessageChatsMessagesPost',
        'messageCreate',
        messageCreate
      )
      const localVarPath = `/chats/messages`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      if (chatId !== undefined) {
        localVarQueryParameter['chat_id'] = chatId
      }

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        messageCreate,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * ChatsApi - functional programming interface
 * @export
 */
export const ChatsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ChatsApiAxiosParamCreator(configuration)
  return {
    /**
     * Deletes a chat by ID, handling not found errors.
     * @summary Delete Chat
     * @param {number} chatId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteChatChatsChatIdDelete(
      chatId: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteChatChatsChatIdDelete(
          chatId,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ChatsApi.deleteChatChatsChatIdDelete']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Retrieves all chats sorted by last updated time.
     * @summary List Chats
     * @param {any} [db]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listChatsChatsGet(
      db?: any,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<ChatListRead>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listChatsChatsGet(db, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ChatsApi.listChatsChatsGet']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Fetches all messages for a specific chat.
     * @summary List Messages
     * @param {number} chatId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listMessagesChatsChatIdMessagesGet(
      chatId: number | undefined,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<MessageRead>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listMessagesChatsChatIdMessagesGet(
          chatId,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ChatsApi.listMessagesChatsChatIdMessagesGet']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Creates a message in an existing chat or starts a new chat if chat_id is not provided.
     * @summary Post Message
     * @param {MessageCreate} messageCreate
     * @param {number | null} [chatId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postMessageChatsMessagesPost(
      messageCreate: MessageCreate,
      chatId?: number | null,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<MessageRead>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.postMessageChatsMessagesPost(
          messageCreate,
          chatId,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ChatsApi.postMessageChatsMessagesPost']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    }
  }
}

/**
 * ChatsApi - factory interface
 * @export
 */
export const ChatsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ChatsApiFp(configuration)
  return {
    /**
     * Deletes a chat by ID, handling not found errors.
     * @summary Delete Chat
     * @param {number} chatId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteChatChatsChatIdDelete(
      chatId: number,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .deleteChatChatsChatIdDelete(chatId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Retrieves all chats sorted by last updated time.
     * @summary List Chats
     * @param {any} [db]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listChatsChatsGet(
      db?: any,
      options?: any
    ): AxiosPromise<Array<ChatListRead>> {
      return localVarFp
        .listChatsChatsGet(db, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Fetches all messages for a specific chat.
     * @summary List Messages
     * @param {number} chatId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMessagesChatsChatIdMessagesGet(
      chatId: number,
      options?: any
    ): AxiosPromise<Array<MessageRead>> {
      return localVarFp
        .listMessagesChatsChatIdMessagesGet(chatId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Creates a message in an existing chat or starts a new chat if chat_id is not provided.
     * @summary Post Message
     * @param {MessageCreate} messageCreate
     * @param {number | null} [chatId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMessageChatsMessagesPost(
      messageCreate: MessageCreate,
      chatId?: number | null,
      options?: any
    ): AxiosPromise<Array<MessageRead>> {
      return localVarFp
        .postMessageChatsMessagesPost(messageCreate, chatId, options)
        .then((request) => request(axios, basePath))
    }
  }
}

/**
 * ChatsApi - object-oriented interface
 * @export
 * @class ChatsApi
 * @extends {BaseAPI}
 */
export class ChatsApi extends BaseAPI {
  /**
   * Deletes a chat by ID, handling not found errors.
   * @summary Delete Chat
   * @param {number} chatId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChatsApi
   */
  public deleteChatChatsChatIdDelete(
    chatId: number,
    options?: RawAxiosRequestConfig
  ) {
    return ChatsApiFp(this.configuration)
      .deleteChatChatsChatIdDelete(chatId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Retrieves all chats sorted by last updated time.
   * @summary List Chats
   * @param {any} [db]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChatsApi
   */
  public listChatsChatsGet(db?: any, options?: RawAxiosRequestConfig) {
    return ChatsApiFp(this.configuration)
      .listChatsChatsGet(db, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Fetches all messages for a specific chat.
   * @summary List Messages
   * @param {number} chatId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChatsApi
   */
  public listMessagesChatsChatIdMessagesGet(
    chatId: number | undefined,
    options?: RawAxiosRequestConfig
  ) {
    return ChatsApiFp(this.configuration)
      .listMessagesChatsChatIdMessagesGet(chatId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Creates a message in an existing chat or starts a new chat if chat_id is not provided.
   * @summary Post Message
   * @param {MessageCreate} messageCreate
   * @param {number | null} [chatId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChatsApi
   */
  public postMessageChatsMessagesPost(
    messageCreate: MessageCreate,
    chatId?: number | null,
    options?: RawAxiosRequestConfig
  ) {
    return ChatsApiFp(this.configuration)
      .postMessageChatsMessagesPost(messageCreate, chatId, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Hello
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    helloGet: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Hello
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async helloGet(
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.helloGet(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['DefaultApi.helloGet']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    }
  }
}

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration)
  return {
    /**
     *
     * @summary Hello
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    helloGet(options?: any): AxiosPromise<any> {
      return localVarFp
        .helloGet(options)
        .then((request) => request(axios, basePath))
    }
  }
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @summary Hello
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public helloGet(options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .helloGet(options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Get User Details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserDetailsUsersMePost: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'OAuth2PasswordBearer',
        [],
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @summary Signup
     * @param {SignUpModal} signUpModal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signupUsersSignupPost: async (
      signUpModal: SignUpModal,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'signUpModal' is not null or undefined
      assertParamExists('signupUsersSignupPost', 'signUpModal', signUpModal)
      const localVarPath = `/users/signup`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        signUpModal,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Get User Details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserDetailsUsersMePost(
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignUpModal>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUserDetailsUsersMePost(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.getUserDetailsUsersMePost']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Signup
     * @param {SignUpModal} signUpModal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signupUsersSignupPost(
      signUpModal: SignUpModal,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.signupUsersSignupPost(
          signUpModal,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['UserApi.signupUsersSignupPost']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    }
  }
}

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserApiFp(configuration)
  return {
    /**
     *
     * @summary Get User Details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserDetailsUsersMePost(options?: any): AxiosPromise<SignUpModal> {
      return localVarFp
        .getUserDetailsUsersMePost(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Signup
     * @param {SignUpModal} signUpModal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signupUsersSignupPost(
      signUpModal: SignUpModal,
      options?: any
    ): AxiosPromise<any> {
      return localVarFp
        .signupUsersSignupPost(signUpModal, options)
        .then((request) => request(axios, basePath))
    }
  }
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   *
   * @summary Get User Details
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUserDetailsUsersMePost(options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getUserDetailsUsersMePost(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Signup
   * @param {SignUpModal} signUpModal
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public signupUsersSignupPost(
    signUpModal: SignUpModal,
    options?: RawAxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .signupUsersSignupPost(signUpModal, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
